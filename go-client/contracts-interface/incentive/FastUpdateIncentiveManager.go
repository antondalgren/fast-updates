// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package incentive

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IFastUpdateIncentiveManagerIncentiveOffer is an auto generated low-level Go binding around an user-defined struct.
type IFastUpdateIncentiveManagerIncentiveOffer struct {
	RangeIncrease *big.Int
	RangeLimit    *big.Int
}

// IncentiveMetaData contains all meta data concerning the Incentive contract.
var IncentiveMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"},{\"internalType\":\"SampleSize\",\"name\":\"_ss\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"SampleSize\",\"name\":\"_sil\",\"type\":\"uint256\"},{\"internalType\":\"Fee\",\"name\":\"_rip\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dur\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"authorizedAmountWei\",\"type\":\"uint256\"}],\"name\":\"DailyAuthorizedInflationSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"name\":\"GovernanceCallTimelocked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"initialGovernance\",\"type\":\"address\"}],\"name\":\"GovernanceInitialised\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"governanceSettings\",\"type\":\"address\"}],\"name\":\"GovernedProductionModeEntered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"SampleSize\",\"name\":\"sampleSizeIncrease\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"Fee\",\"name\":\"offerAmount\",\"type\":\"uint256\"}],\"name\":\"IncentiveOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountReceivedWei\",\"type\":\"uint256\"}],\"name\":\"InflationReceived\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint24\",\"name\":\"rewardEpochId\",\"type\":\"uint24\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"feedIds\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"rewardBandValues\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"inflationShares\",\"type\":\"bytes\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InflationRewardsOffered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallCanceled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"TimelockedGovernanceCallExecuted\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"advance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"cancelGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"circularLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"dailyAuthorizedInflation\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"_selector\",\"type\":\"bytes4\"}],\"name\":\"executeGovernanceCall\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fastUpdatesConfiguration\",\"outputs\":[{\"internalType\":\"contractIFastUpdatesConfiguration\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"flareSystemsManager\",\"outputs\":[{\"internalType\":\"contractIIFlareSystemsManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAddressUpdater\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"_addressUpdater\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExpectedSampleSize\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getIncentiveDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInflationAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPrecision\",\"outputs\":[{\"internalType\":\"Precision\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRange\",\"outputs\":[{\"internalType\":\"Range\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getScale\",\"outputs\":[{\"internalType\":\"Scale\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTokenPoolSupplyData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"_lockedFundsWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalInflationAuthorizedWei\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalClaimedWei\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceSettings\",\"outputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIGovernanceSettings\",\"name\":\"_governanceSettings\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_initialGovernance\",\"type\":\"address\"}],\"name\":\"initialise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"isExecutor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInflationAuthorizationReceivedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastInflationReceivedTs\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"Range\",\"name\":\"rangeIncrease\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"rangeLimit\",\"type\":\"uint256\"}],\"internalType\":\"structIFastUpdateIncentiveManager.IncentiveOffer\",\"name\":\"_offer\",\"type\":\"tuple\"}],\"name\":\"offerIncentive\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"productionMode\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rangeIncreasePrice\",\"outputs\":[{\"internalType\":\"Fee\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveInflation\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardManager\",\"outputs\":[{\"internalType\":\"contractIIRewardManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sampleIncreaseLimit\",\"outputs\":[{\"internalType\":\"SampleSize\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toAuthorizeWei\",\"type\":\"uint256\"}],\"name\":\"setDailyAuthorizedInflation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SampleSize\",\"name\":\"_ss\",\"type\":\"uint256\"},{\"internalType\":\"Range\",\"name\":\"_r\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_dur\",\"type\":\"uint256\"}],\"name\":\"setIncentiveParameters\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"Fee\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"setRangeIncreasePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"SampleSize\",\"name\":\"_lim\",\"type\":\"uint256\"}],\"name\":\"setSampleIncreaseLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"switchToProductionMode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"selector\",\"type\":\"bytes4\"}],\"name\":\"timelockedCalls\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"allowedAfterTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encodedCall\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationAuthorizedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationReceivedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalInflationRewardsOfferedWei\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_currentRewardEpochId\",\"type\":\"uint24\"},{\"internalType\":\"uint64\",\"name\":\"_currentRewardEpochExpectedEndTs\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"_rewardEpochDurationSeconds\",\"type\":\"uint64\"}],\"name\":\"triggerRewardEpochSwitchover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"_contractNameHashes\",\"type\":\"bytes32[]\"},{\"internalType\":\"address[]\",\"name\":\"_contractAddresses\",\"type\":\"address[]\"}],\"name\":\"updateContractAddresses\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200344f3803806200344f8339810160408190526200003491620006c0565b878787808084848b8b60018a806200004c81620000cc565b506200005b848484846200014d565b50505050620000718282620001e560201b60201c565b506200009d9050817f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b5050505050620000b3836200035a60201b60201c565b620000be82620003b8565b50505050505050506200075a565b60008111620001485760405162461bcd60e51b815260206004820152603b60248201527f43697263756c61724c6973744d616e616765723a2063697263756c6172206c6560448201527f6e677468206d7573742062652067726561746572207468616e2030000000000060648201526084015b60405180910390fd5b600055565b620001588462000416565b620001638362000474565b828411620001c05760405162461bcd60e51b815260206004820152602360248201527f52616e6765206d757374206265206c657373207468616e2073616d706c652073604482015262697a6560e81b60648201526084016200013f565b620001ca82600655565b620001d581620000cc565b620001df620004c4565b50505050565b600754600160a01b900460ff1615620002415760405162461bcd60e51b815260206004820152601460248201527f696e697469616c6973656420213d2066616c736500000000000000000000000060448201526064016200013f565b6001600160a01b038216620002995760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f000000000000000060448201526064016200013f565b6001600160a01b038116620002e45760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b60448201526064016200013f565b600780546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600880549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b62000365816200060d565b620003b35760405162461bcd60e51b815260206004820152601f60248201527f53616d706c6520696e637265617365206c696d697420746f6f206c617267650060448201526064016200013f565b601555565b620003c3816200060d565b620004115760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e63726561736520707269636520746f6f206c61726765000060448201526064016200013f565b601655565b62000421816200060d565b6200046f5760405162461bcd60e51b815260206004820152601560248201527f53616d706c652073697a6520746f6f206c61726765000000000000000000000060448201526064016200013f565b600455565b6200047f816200060d565b620004bf5760405162461bcd60e51b815260206004820152600f60248201526e52616e676520746f6f206c6172676560881b60448201526064016200013f565b600555565b620004d26001600062000623565b620004e06002600062000623565b620004ee6003600062000623565b6000546001600160401b038111156200050b576200050b62000744565b60405190808252806020026020018201604052801562000535578160200160208202803683370190505b5080516200054c9160019160209091019062000643565b506000546001600160401b038111156200056a576200056a62000744565b60405190808252806020026020018201604052801562000594578160200160208202803683370190505b508051620005ab9160029160209091019062000643565b506000546001600160401b03811115620005c957620005c962000744565b604051908082528060200260200182016040528015620005f3578160200160208202803683370190505b5080516200060a9160039160209091019062000643565b50565b60006200061d82600160801b1190565b92915050565b50805460008255906000526020600020908101906200060a919062000693565b82805482825590600052602060002090810192821562000681579160200282015b828111156200068157825182559160200191906001019062000664565b506200068f92915062000693565b5090565b5b808211156200068f576000815560010162000694565b6001600160a01b03811681146200060a57600080fd5b600080600080600080600080610100898b031215620006de57600080fd5b8851620006eb81620006aa565b60208a0151909850620006fe81620006aa565b60408a01519097506200071181620006aa565b60608a015160808b015160a08c015160c08d015160e0909d01519b9e9a9d50929b919a9099929850909650945092505050565b634e487b7160e01b600052604160045260246000fd5b612ce5806200076a6000396000f3fe6080604052600436106102465760003560e01c8063a5555aea11610139578063dd8dca9f116100b6578063ed39d3f81161007a578063ed39d3f81461064a578063ef88bf1314610668578063f5a9838314610688578063f5f5ba721461069d578063f7690bfe146106e9578063faae7fc91461070957600080fd5b8063dd8dca9f146105af578063debfda30146105c4578063e17f212e146105f4578063e273956314610615578063ea105ac71461063557600080fd5b8063bd76b69c116100fd578063bd76b69c1461052d578063c10f489a14610543578063d0c1c39314610563578063d29a4fa914610579578063d4ab8f941461059957600080fd5b8063a5555aea146104ad578063af04cd3b146104c3578063b00c0b76146104d8578063b5cddab8146104f8578063b97e1f5d1461050d57600080fd5b80635aa6e675116101c7578063708e34ce1161018b578063708e34ce1461041f57806374e6310e1461043557806391f25679146104635780639670c0bc146104835780639b85961f1461049857600080fd5b80635aa6e675146103955780635ff27079146103aa57806362354e03146103ca57806367fc4029146103ea5780636d62b4131461040a57600080fd5b8063362471801161020e578063362471801461030c578063473252c41461031f578063488f98061461033557806352545a7c1461034b5780635267a15d1461036157600080fd5b806306201f1d1461024b5780630d6e9537146102555780630f4ef8a61461027557806312afcf0b146102b25780632dafdbbf146102d6575b600080fd5b610253610729565b005b34801561026157600080fd5b506102536102703660046124a9565b61078b565b34801561028157600080fd5b50601254610295906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156102be57600080fd5b506102c8600d5481565b6040519081526020016102a9565b3480156102e257600080fd5b506102f1600a54601454600092565b604080519384526020840192909252908201526060016102a9565b61025361031a3660046124c2565b6107d1565b34801561032b57600080fd5b506102c8600c5481565b34801561034157600080fd5b506102c860005481565b34801561035757600080fd5b506102c860165481565b34801561036d57600080fd5b507f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771954610295565b3480156103a157600080fd5b50610295610955565b3480156103b657600080fd5b506102536103c53660046124da565b6109f5565b3480156103d657600080fd5b50600754610295906001600160a01b031681565b3480156103f657600080fd5b506102536104053660046124da565b610c83565b34801561041657600080fd5b506004546102c8565b34801561042b57600080fd5b506102c8600e5481565b34801561044157600080fd5b506104556104503660046124da565b610d64565b6040516102a9929190612554565b34801561046f57600080fd5b5061025361047e3660046125a2565b610e09565b34801561048f57600080fd5b506102c8610e6e565b3480156104a457600080fd5b506005546102c8565b3480156104b957600080fd5b506102c8600b5481565b3480156104cf57600080fd5b506102c8610e78565b3480156104e457600080fd5b506102536104f33660046126d9565b610e82565b34801561050457600080fd5b506102c8610f61565b34801561051957600080fd5b50610253610528366004612791565b610f77565b34801561053957600080fd5b506102c860145481565b34801561054f57600080fd5b50601354610295906001600160a01b031681565b34801561056f57600080fd5b506102c8600a5481565b34801561058557600080fd5b50601154610295906001600160a01b031681565b3480156105a557600080fd5b506102c860155481565b3480156105bb57600080fd5b506000546102c8565b3480156105d057600080fd5b506105e46105df3660046127bd565b610fbe565b60405190151581526020016102a9565b34801561060057600080fd5b506007546105e490600160a81b900460ff1681565b34801561062157600080fd5b506102536106303660046124a9565b611049565b34801561064157600080fd5b506102536110a1565b34801561065657600080fd5b50600f546001600160a01b0316610295565b34801561067457600080fd5b506102536106833660046127da565b6110f7565b34801561069457600080fd5b5061025361125d565b3480156106a957600080fd5b50604080518082018252601a81527f46617374557064617465496e63656e746976654d616e61676572000000000000602082015290516102a99190612813565b3480156106f557600080fd5b506102536107043660046124a9565b611323565b34801561071557600080fd5b50601054610295906001600160a01b031681565b61073161135b565b6107396113c3565b34600b54610747919061283c565b600b5542600d556040513481527f95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d379060200160405180910390a161078961140e565b565b600754600160b01b900460ff16806107ad5750600754600160a81b900460ff16155b156107c6576107ba611455565b6107c38161148d565b50565b6107c36000366114e7565b6107d961135b565b6000806107e583611637565b9150915060006107f58383611774565b60125460408051637056269760e01b815290519293506001600160a01b039091169163a02e86e5918691849163705626979160048083019260209291908290030181865afa15801561084b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086f919061284f565b6040516001600160e01b031960e085901b16815262ffffff9091166004820152600060248201526044016000604051808303818588803b1580156108b257600080fd5b505af11580156108c6573d6000803e3d6000fd5b505060408051868152602081018690529081018790527fe2bf2dae8fb2fd1f86fd6d50871b97c48b27cd148bb07311c99b4b7b24453f5b9350606001915061090b9050565b60405180910390a1336108fc610921853461286c565b6040518115909202916000818181858888f19350505050158015610949573d6000803e3d6000fd5b505050506107c361140e565b600754600090600160a81b900460ff1661097957506008546001600160a01b031690565b600760009054906101000a90046001600160a01b03166001600160a01b031663732524946040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f0919061287f565b905090565b6109fe33610fbe565b610a3f5760405162461bcd60e51b815260206004820152600d60248201526c37b7363c9032bc32b1baba37b960991b60448201526064015b60405180910390fd5b6001600160e01b0319811660009081526009602052604081208054909103610aa95760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f720000000000006044820152606401610a36565b8054421015610afa5760405162461bcd60e51b815260206004820152601960248201527f74696d656c6f636b3a206e6f7420616c6c6f77656420796574000000000000006044820152606401610a36565b6000816001018054610b0b9061289c565b80601f0160208091040260200160405190810160405280929190818152602001828054610b379061289c565b8015610b845780601f10610b5957610100808354040283529160200191610b84565b820191906000526020600020905b815481529060010190602001808311610b6757829003601f168201915b505050506001600160e01b0319851660009081526009602052604081208181559293509050610bb660018301826123f1565b50506007805460ff60b01b1916600160b01b1790556040516000903090610bde9084906128d0565b6000604051808303816000865af19150503d8060008114610c1b576040519150601f19603f3d011682016040523d82523d6000602084013e610c20565b606091505b50506007805460ff60b01b19169055604080516001600160e01b0319871681524260208201529192507fa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438910160405180910390a1610c7d81611834565b50505050565b610c8b611851565b6001600160e01b031981166000908152600960205260408120549003610cf35760405162461bcd60e51b815260206004820152601a60248201527f74696d656c6f636b3a20696e76616c69642073656c6563746f720000000000006044820152606401610a36565b604080516001600160e01b0319831681524260208201527f7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8910160405180910390a16001600160e01b03198116600090815260096020526040812081815590610d5f60018301826123f1565b505050565b60096020526000908152604090208054600182018054919291610d869061289c565b80601f0160208091040260200160405190810160405280929190818152602001828054610db29061289c565b8015610dff5780601f10610dd457610100808354040283529160200191610dff565b820191906000526020600020905b815481529060010190602001808311610de257829003601f168201915b5050505050905082565b6010546001600160a01b03163314610e635760405162461bcd60e51b815260206004820152601960248201527f6f6e6c7920666c6172652073797374656d206d616e61676572000000000000006044820152606401610a36565b610d5f8383836118ab565b60006109f0611a95565b60006109f0611aa5565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e7719546001600160a01b0316336001600160a01b031614610efb5760405162461bcd60e51b815260206004820152601460248201527337b7363c9030b2323932b9b9903ab83230ba32b960611b6044820152606401610a36565b610f53610f2f83836040518060400160405280600e81526020016d20b2323932b9b9aab83230ba32b960911b815250611ab7565b7f714f205b2abd25bef1d06a1af944e38c113fe6160375c4e1d6d5cf28848e771955565b610f5d8282611b94565b5050565b60006109f0610f6e611a95565b6001607f1b0190565b600754600160b01b900460ff1680610f995750600754600160a81b900460ff16155b15610fb357610fa6611455565b610d5f8383600184611cac565b610d5f6000366114e7565b600754600090600160a01b900460ff1680156110435750600754604051630debfda360e41b81526001600160a01b0384811660048301529091169063debfda3090602401602060405180830381865afa15801561101f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061104391906128ec565b92915050565b6110516113c3565b600e819055600a5461106490829061283c565b600a5542600c556040518181527f187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a476695959060200160405180910390a150565b6011546001600160a01b031633146110ef5760405162461bcd60e51b815260206004820152601160248201527037b7363c903330b9ba103ab83230ba32b960791b6044820152606401610a36565b610789611d33565b600754600160a01b900460ff16156111485760405162461bcd60e51b8152602060048201526014602482015273696e697469616c6973656420213d2066616c736560601b6044820152606401610a36565b6001600160a01b03821661119e5760405162461bcd60e51b815260206004820152601860248201527f676f7665726e616e63652073657474696e6773207a65726f00000000000000006044820152606401610a36565b6001600160a01b0381166111e75760405162461bcd60e51b815260206004820152601060248201526f5f676f7665726e616e6365207a65726f60801b6044820152606401610a36565b600780546001600160a01b038481166001600160a81b031990921691909117600160a01b17909155600880549183166001600160a01b0319909216821790556040519081527f9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db9060200160405180910390a15050565b611265611851565b600754600160a81b900460ff16156112bf5760405162461bcd60e51b815260206004820152601a60248201527f616c726561647920696e2070726f64756374696f6e206d6f64650000000000006044820152606401610a36565b600880546001600160a01b031916905560078054600160a81b60ff60a81b198216179091556040516001600160a01b0390911681527f83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c9060200160405180910390a1565b600754600160b01b900460ff16806113455750600754600160a81b900460ff16155b156107c657611352611455565b6107c381611e0c565b600034611366611aa5565b611370919061283c565b905047818111156113b35761dead6108fc61138b848461286c565b6040518115909202916000818181858888f19350505050158015610d5f573d6000803e3d6000fd5b81811015610f5d57610f5d61290e565b600f546001600160a01b031633146107895760405162461bcd60e51b815260206004820152600e60248201526d696e666c6174696f6e206f6e6c7960901b6044820152606401610a36565b611416611aa5565b47146107895760405162461bcd60e51b815260206004820152600e60248201526d6f7574206f662062616c616e636560901b6044820152606401610a36565b600754600160b01b900460ff1615611485573330146114765761147661290e565b6007805460ff60b01b19169055565b610789611851565b61149681611e66565b6114e25760405162461bcd60e51b815260206004820152601e60248201527f52616e676520696e63726561736520707269636520746f6f206c6172676500006044820152606401610a36565b601655565b6114ef611851565b60075460408051636221a54b60e01b815290518435926000926001600160a01b0390911691636221a54b916004808201926020929091908290030181865afa15801561153f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115639190612924565b90506000611571824261283c565b9050604051806040016040528082815260200186868080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201829052509390945250506001600160e01b031986168152600960209081526040909120835181559083015190915060018201906115ef908261298b565b509050507fed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6838287876040516116289493929190612a4a565b60405180910390a15050505050565b6000803460781c1561169c5760405162461bcd60e51b815260206004820152602860248201527f496e63656e74697665206f666665722076616c75652063617070656420617420604482015267313230206269747360c01b6064820152608401610a36565b5050600554346001600160f01b031690823590810160208401358111156116fe578360200135905060006116d1826005541190565b6116df5760055482036116e2565b60005b90506116f96116f18285611e75565b850260801c90565b935091505b611709816004541190565b61176e5760405162461bcd60e51b815260206004820152603060248201527f4f6666657220776f756c64206d616b652074686520707265636973696f6e206760448201526f726561746572207468616e203130302560801b6064820152608401610a36565b50915091565b600080611785601654840260781c90565b9050838111156117f35760405162461bcd60e51b815260206004820152603360248201527f496e73756666696369656e7420636f6e747269627574696f6e20746f2070617960448201527220666f722072616e676520696e63726561736560681b6064820152608401610a36565b8084036117ff81611e98565b61181861180e82600654611e75565b6015540260801c90565b925061182383611ef6565b61182c84611f34565b505092915050565b3d604051818101604052816000823e821561184d578181f35b8181fd5b611859610955565b6001600160a01b0316336001600160a01b0316146107895760405162461bcd60e51b815260206004820152600f60248201526e6f6e6c7920676f7665726e616e636560881b6044820152606401610a36565b60006118b8826002612a90565b6118c29084612ab3565b6001600160401b0316905060006118fb62015180600d546118e3919061283c565b6118ed8587612ab3565b6001600160401b0316611f72565b9050600061192d6001600160401b038516611916858561286c565b601454600b54611926919061286c565b9190611f88565b9050600061193c876001612ada565b90506000806000601360009054906101000a90046001600160a01b03166001600160a01b03166348a924826040518163ffffffff1660e01b8152600401600060405180830381865afa158015611996573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526119be9190810190612b59565b9250925092508362ffffff167ffdd0b465b401aa1b01bf9945ca3b5ad04d97007d090db1f5b126a502e890d610848484896040516119ff9493929190612be0565b60405180910390a28460146000828254611a19919061283c565b909155505060125460405163a02e86e560e01b815262ffffff86166004820152600160248201526001600160a01b039091169063a02e86e59087906044016000604051808303818588803b158015611a7057600080fd5b505af1158015611a84573d6000803e3d6000fd5b505050505050505050505050505050565b60006109f06005546004546120ae565b6000601454600b546109f0919061286c565b60008082604051602001611acb9190612813565b6040516020818303038152906040528051906020012090506000805b8651811015611b4357868181518110611b0257611b02612c2b565b60200260200101518303611b3157858181518110611b2257611b22612c2b565b60200260200101519150611b43565b80611b3b81612c41565b915050611ae7565b506001600160a01b038116611b895760405162461bcd60e51b815260206004820152600c60248201526b61646472657373207a65726f60a01b6044820152606401610a36565b9150505b9392505050565b611b9e82826120c6565b611bcc82826040518060400160405280600b81526020016a2330b9ba2ab83230ba32b960a91b815250611ab7565b601160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611c2282826040518060400160405280600d81526020016c2932bbb0b93226b0b730b3b2b960991b815250611ab7565b601260006101000a8154816001600160a01b0302191690836001600160a01b03160217905550611c8882826040518060400160405280601881526020017f4661737455706461746573436f6e66696775726174696f6e0000000000000000815250611ab7565b601380546001600160a01b0319166001600160a01b03929092169190911790555050565b611cb58461212a565b611cbe8361217c565b828411611d195760405162461bcd60e51b815260206004820152602360248201527f52616e6765206d757374206265206c657373207468616e2073616d706c652073604482015262697a6560e81b6064820152608401610a36565b611d2282600655565b611d2b816121c8565b610c7d612243565b611d636006546003611d43612371565b81548110611d5357611d53612c2b565b9060005260206000200154900390565b600655600554611d77906002611d43612371565b600555600454611d8b906001611d43612371565b60045560006001611d9a612371565b81548110611daa57611daa612c2b565b906000526020600020018190555060006002611dc4612371565b81548110611dd457611dd4612c2b565b906000526020600020018190555060006003611dee612371565b81548110611dfe57611dfe612c2b565b600091825260209091200155565b611e1581611e66565b611e615760405162461bcd60e51b815260206004820152601f60248201527f53616d706c6520696e637265617365206c696d697420746f6f206c61726765006044820152606401610a36565b601555565b600061104382600160801b1190565b6000608083901b8282818381611e8d57611e8d612c5a565b049695505050505050565b611ec56003611ea561237d565b81548110611eb557611eb5612c2b565b9060005260206000200154820190565b6003611ecf61237d565b81548110611edf57611edf612c2b565b600091825260209091200155600654810160065550565b611f036001611ea561237d565b6001611f0d61237d565b81548110611f1d57611f1d612c2b565b600091825260209091200155600454810160045550565b611f416002611ea561237d565b6002611f4b61237d565b81548110611f5b57611f5b612c2b565b600091825260209091200155600554810160055550565b6000818311611f815781611b8d565b5090919050565b6000808211611fcc5760405162461bcd60e51b815260206004820152601060248201526f4469766973696f6e206279207a65726f60801b6044820152606401610a36565b83600003611fdc57506000611b8d565b83830283858281611fef57611fef612c5a565b040361200d5782818161200457612004612c5a565b04915050611b8d565b50600061201a8386612c70565b905060006120288487612c84565b905060006120368587612c70565b905060006120448688612c84565b9050856120518285612c98565b61205b9190612c70565b6120658385612c98565b61206f8387612c98565b8861207a8689612c98565b6120849190612c98565b61208e919061283c565b612098919061283c565b6120a2919061283c565b98975050505050505050565b6000607f83901b8282818381611e8d57611e8d612c5a565b6120d08282612389565b612106828260405180604001604052806013815260200172233630b932a9bcb9ba32b6b9a6b0b730b3b2b960691b815250611ab7565b601080546001600160a01b0319166001600160a01b03929092169190911790555050565b61213381611e66565b6121775760405162461bcd60e51b815260206004820152601560248201527453616d706c652073697a6520746f6f206c6172676560581b6044820152606401610a36565b600455565b61218581611e66565b6121c35760405162461bcd60e51b815260206004820152600f60248201526e52616e676520746f6f206c6172676560881b6044820152606401610a36565b600555565b6000811161223e5760405162461bcd60e51b815260206004820152603b60248201527f43697263756c61724c6973744d616e616765723a2063697263756c6172206c6560448201527f6e677468206d7573742062652067726561746572207468616e203000000000006064820152608401610a36565b600055565b61224f6001600061242b565b61225b6002600061242b565b6122676003600061242b565b6000546001600160401b03811115612281576122816125e7565b6040519080825280602002602001820160405280156122aa578160200160208202803683370190505b5080516122bf91600191602090910190612449565b506000546001600160401b038111156122da576122da6125e7565b604051908082528060200260200182016040528015612303578160200160208202803683370190505b50805161231891600291602090910190612449565b506000546001600160401b03811115612333576123336125e7565b60405190808252806020026020018201604052801561235c578160200160208202803683370190505b5080516107c391600391602090910190612449565b60006109f060016123d9565b60006109f060006123d9565b6123b582826040518060400160405280600981526020016824b7333630ba34b7b760b91b815250611ab7565b600f80546001600160a01b0319166001600160a01b03929092169190911790555050565b600080546123e7438461283c565b6110439190612c84565b5080546123fd9061289c565b6000825580601f1061240d575050565b601f0160209004906000526020600020908101906107c39190612494565b50805460008255906000526020600020908101906107c39190612494565b828054828255906000526020600020908101928215612484579160200282015b82811115612484578251825591602001919060010190612469565b50612490929150612494565b5090565b5b808211156124905760008155600101612495565b6000602082840312156124bb57600080fd5b5035919050565b6000604082840312156124d457600080fd5b50919050565b6000602082840312156124ec57600080fd5b81356001600160e01b031981168114611b8d57600080fd5b60005b8381101561251f578181015183820152602001612507565b50506000910152565b60008151808452612540816020860160208601612504565b601f01601f19169290920160200192915050565b82815260406020820152600061256d6040830184612528565b949350505050565b62ffffff811681146107c357600080fd5b80356001600160401b038116811461259d57600080fd5b919050565b6000806000606084860312156125b757600080fd5b83356125c281612575565b92506125d060208501612586565b91506125de60408501612586565b90509250925092565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715612625576126256125e7565b604052919050565b60006001600160401b03821115612646576126466125e7565b5060051b60200190565b6001600160a01b03811681146107c357600080fd5b600082601f83011261267657600080fd5b8135602061268b6126868361262d565b6125fd565b82815260059290921b840181019181810190868411156126aa57600080fd5b8286015b848110156126ce5780356126c181612650565b83529183019183016126ae565b509695505050505050565b600080604083850312156126ec57600080fd5b82356001600160401b038082111561270357600080fd5b818501915085601f83011261271757600080fd5b813560206127276126868361262d565b82815260059290921b8401810191818101908984111561274657600080fd5b948201945b838610156127645785358252948201949082019061274b565b9650508601359250508082111561277a57600080fd5b5061278785828601612665565b9150509250929050565b6000806000606084860312156127a657600080fd5b505081359360208301359350604090920135919050565b6000602082840312156127cf57600080fd5b8135611b8d81612650565b600080604083850312156127ed57600080fd5b82356127f881612650565b9150602083013561280881612650565b809150509250929050565b602081526000611b8d6020830184612528565b634e487b7160e01b600052601160045260246000fd5b8082018082111561104357611043612826565b60006020828403121561286157600080fd5b8151611b8d81612575565b8181038181111561104357611043612826565b60006020828403121561289157600080fd5b8151611b8d81612650565b600181811c908216806128b057607f821691505b6020821081036124d457634e487b7160e01b600052602260045260246000fd5b600082516128e2818460208701612504565b9190910192915050565b6000602082840312156128fe57600080fd5b81518015158114611b8d57600080fd5b634e487b7160e01b600052600160045260246000fd5b60006020828403121561293657600080fd5b5051919050565b601f821115610d5f57600081815260208120601f850160051c810160208610156129645750805b601f850160051c820191505b8181101561298357828155600101612970565b505050505050565b81516001600160401b038111156129a4576129a46125e7565b6129b8816129b2845461289c565b8461293d565b602080601f8311600181146129ed57600084156129d55750858301515b600019600386901b1c1916600185901b178555612983565b600085815260208120601f198616915b82811015612a1c578886015182559484019460019091019084016129fd565b5085821015612a3a5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b63ffffffff60e01b8516815283602082015260606040820152816060820152818360808301376000818301608090810191909152601f909201601f191601019392505050565b6001600160401b0381811683821602808216919082811461182c5761182c612826565b6001600160401b03828116828216039080821115612ad357612ad3612826565b5092915050565b62ffffff818116838216019080821115612ad357612ad3612826565b600082601f830112612b0757600080fd5b81516001600160401b03811115612b2057612b206125e7565b612b33601f8201601f19166020016125fd565b818152846020838601011115612b4857600080fd5b61256d826020830160208701612504565b600080600060608486031215612b6e57600080fd5b83516001600160401b0380821115612b8557600080fd5b612b9187838801612af6565b94506020860151915080821115612ba757600080fd5b612bb387838801612af6565b93506040860151915080821115612bc957600080fd5b50612bd686828701612af6565b9150509250925092565b608081526000612bf36080830187612528565b8281036020840152612c058187612528565b90508281036040840152612c198186612528565b91505082606083015295945050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201612c5357612c53612826565b5060010190565b634e487b7160e01b600052601260045260246000fd5b600082612c7f57612c7f612c5a565b500490565b600082612c9357612c93612c5a565b500690565b80820281158282048414176110435761104361282656fea2646970667358221220eeeb751c26a44ed2689e0131369651666e567d74523f9596a27193311cd2057c64736f6c63430008140033",
}

// IncentiveABI is the input ABI used to generate the binding from.
// Deprecated: Use IncentiveMetaData.ABI instead.
var IncentiveABI = IncentiveMetaData.ABI

// IncentiveBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use IncentiveMetaData.Bin instead.
var IncentiveBin = IncentiveMetaData.Bin

// DeployIncentive deploys a new Ethereum contract, binding an instance of Incentive to it.
func DeployIncentive(auth *bind.TransactOpts, backend bind.ContractBackend, _governanceSettings common.Address, _initialGovernance common.Address, _addressUpdater common.Address, _ss *big.Int, _r *big.Int, _sil *big.Int, _rip *big.Int, _dur *big.Int) (common.Address, *types.Transaction, *Incentive, error) {
	parsed, err := IncentiveMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(IncentiveBin), backend, _governanceSettings, _initialGovernance, _addressUpdater, _ss, _r, _sil, _rip, _dur)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Incentive{IncentiveCaller: IncentiveCaller{contract: contract}, IncentiveTransactor: IncentiveTransactor{contract: contract}, IncentiveFilterer: IncentiveFilterer{contract: contract}}, nil
}

// Incentive is an auto generated Go binding around an Ethereum contract.
type Incentive struct {
	IncentiveCaller     // Read-only binding to the contract
	IncentiveTransactor // Write-only binding to the contract
	IncentiveFilterer   // Log filterer for contract events
}

// IncentiveCaller is an auto generated read-only Go binding around an Ethereum contract.
type IncentiveCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveTransactor is an auto generated write-only Go binding around an Ethereum contract.
type IncentiveTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type IncentiveFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// IncentiveSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type IncentiveSession struct {
	Contract     *Incentive        // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// IncentiveCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type IncentiveCallerSession struct {
	Contract *IncentiveCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts    // Call options to use throughout this session
}

// IncentiveTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type IncentiveTransactorSession struct {
	Contract     *IncentiveTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts    // Transaction auth options to use throughout this session
}

// IncentiveRaw is an auto generated low-level Go binding around an Ethereum contract.
type IncentiveRaw struct {
	Contract *Incentive // Generic contract binding to access the raw methods on
}

// IncentiveCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type IncentiveCallerRaw struct {
	Contract *IncentiveCaller // Generic read-only contract binding to access the raw methods on
}

// IncentiveTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type IncentiveTransactorRaw struct {
	Contract *IncentiveTransactor // Generic write-only contract binding to access the raw methods on
}

// NewIncentive creates a new instance of Incentive, bound to a specific deployed contract.
func NewIncentive(address common.Address, backend bind.ContractBackend) (*Incentive, error) {
	contract, err := bindIncentive(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Incentive{IncentiveCaller: IncentiveCaller{contract: contract}, IncentiveTransactor: IncentiveTransactor{contract: contract}, IncentiveFilterer: IncentiveFilterer{contract: contract}}, nil
}

// NewIncentiveCaller creates a new read-only instance of Incentive, bound to a specific deployed contract.
func NewIncentiveCaller(address common.Address, caller bind.ContractCaller) (*IncentiveCaller, error) {
	contract, err := bindIncentive(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &IncentiveCaller{contract: contract}, nil
}

// NewIncentiveTransactor creates a new write-only instance of Incentive, bound to a specific deployed contract.
func NewIncentiveTransactor(address common.Address, transactor bind.ContractTransactor) (*IncentiveTransactor, error) {
	contract, err := bindIncentive(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &IncentiveTransactor{contract: contract}, nil
}

// NewIncentiveFilterer creates a new log filterer instance of Incentive, bound to a specific deployed contract.
func NewIncentiveFilterer(address common.Address, filterer bind.ContractFilterer) (*IncentiveFilterer, error) {
	contract, err := bindIncentive(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &IncentiveFilterer{contract: contract}, nil
}

// bindIncentive binds a generic wrapper to an already deployed contract.
func bindIncentive(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := IncentiveMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incentive *IncentiveRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Incentive.Contract.IncentiveCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incentive *IncentiveRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.Contract.IncentiveTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incentive *IncentiveRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incentive.Contract.IncentiveTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Incentive *IncentiveCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Incentive.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Incentive *IncentiveTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Incentive *IncentiveTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Incentive.Contract.contract.Transact(opts, method, params...)
}

// CircularLength is a free data retrieval call binding the contract method 0x488f9806.
//
// Solidity: function circularLength() view returns(uint256)
func (_Incentive *IncentiveCaller) CircularLength(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "circularLength")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// CircularLength is a free data retrieval call binding the contract method 0x488f9806.
//
// Solidity: function circularLength() view returns(uint256)
func (_Incentive *IncentiveSession) CircularLength() (*big.Int, error) {
	return _Incentive.Contract.CircularLength(&_Incentive.CallOpts)
}

// CircularLength is a free data retrieval call binding the contract method 0x488f9806.
//
// Solidity: function circularLength() view returns(uint256)
func (_Incentive *IncentiveCallerSession) CircularLength() (*big.Int, error) {
	return _Incentive.Contract.CircularLength(&_Incentive.CallOpts)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveCaller) DailyAuthorizedInflation(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "dailyAuthorizedInflation")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _Incentive.Contract.DailyAuthorizedInflation(&_Incentive.CallOpts)
}

// DailyAuthorizedInflation is a free data retrieval call binding the contract method 0x708e34ce.
//
// Solidity: function dailyAuthorizedInflation() view returns(uint256)
func (_Incentive *IncentiveCallerSession) DailyAuthorizedInflation() (*big.Int, error) {
	return _Incentive.Contract.DailyAuthorizedInflation(&_Incentive.CallOpts)
}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveCaller) FastUpdater(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "fastUpdater")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveSession) FastUpdater() (common.Address, error) {
	return _Incentive.Contract.FastUpdater(&_Incentive.CallOpts)
}

// FastUpdater is a free data retrieval call binding the contract method 0xd29a4fa9.
//
// Solidity: function fastUpdater() view returns(address)
func (_Incentive *IncentiveCallerSession) FastUpdater() (common.Address, error) {
	return _Incentive.Contract.FastUpdater(&_Incentive.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveCaller) FastUpdatesConfiguration(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "fastUpdatesConfiguration")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveSession) FastUpdatesConfiguration() (common.Address, error) {
	return _Incentive.Contract.FastUpdatesConfiguration(&_Incentive.CallOpts)
}

// FastUpdatesConfiguration is a free data retrieval call binding the contract method 0xc10f489a.
//
// Solidity: function fastUpdatesConfiguration() view returns(address)
func (_Incentive *IncentiveCallerSession) FastUpdatesConfiguration() (common.Address, error) {
	return _Incentive.Contract.FastUpdatesConfiguration(&_Incentive.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveCaller) FlareSystemsManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "flareSystemsManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveSession) FlareSystemsManager() (common.Address, error) {
	return _Incentive.Contract.FlareSystemsManager(&_Incentive.CallOpts)
}

// FlareSystemsManager is a free data retrieval call binding the contract method 0xfaae7fc9.
//
// Solidity: function flareSystemsManager() view returns(address)
func (_Incentive *IncentiveCallerSession) FlareSystemsManager() (common.Address, error) {
	return _Incentive.Contract.FlareSystemsManager(&_Incentive.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveCaller) GetAddressUpdater(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getAddressUpdater")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveSession) GetAddressUpdater() (common.Address, error) {
	return _Incentive.Contract.GetAddressUpdater(&_Incentive.CallOpts)
}

// GetAddressUpdater is a free data retrieval call binding the contract method 0x5267a15d.
//
// Solidity: function getAddressUpdater() view returns(address _addressUpdater)
func (_Incentive *IncentiveCallerSession) GetAddressUpdater() (common.Address, error) {
	return _Incentive.Contract.GetAddressUpdater(&_Incentive.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveCaller) GetContractName(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getContractName")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveSession) GetContractName() (string, error) {
	return _Incentive.Contract.GetContractName(&_Incentive.CallOpts)
}

// GetContractName is a free data retrieval call binding the contract method 0xf5f5ba72.
//
// Solidity: function getContractName() pure returns(string)
func (_Incentive *IncentiveCallerSession) GetContractName() (string, error) {
	return _Incentive.Contract.GetContractName(&_Incentive.CallOpts)
}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveCaller) GetExpectedBalance(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getExpectedBalance")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveSession) GetExpectedBalance() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedBalance(&_Incentive.CallOpts)
}

// GetExpectedBalance is a free data retrieval call binding the contract method 0xaf04cd3b.
//
// Solidity: function getExpectedBalance() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetExpectedBalance() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedBalance(&_Incentive.CallOpts)
}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveCaller) GetExpectedSampleSize(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getExpectedSampleSize")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveSession) GetExpectedSampleSize() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedSampleSize(&_Incentive.CallOpts)
}

// GetExpectedSampleSize is a free data retrieval call binding the contract method 0x6d62b413.
//
// Solidity: function getExpectedSampleSize() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetExpectedSampleSize() (*big.Int, error) {
	return _Incentive.Contract.GetExpectedSampleSize(&_Incentive.CallOpts)
}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveCaller) GetIncentiveDuration(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getIncentiveDuration")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveSession) GetIncentiveDuration() (*big.Int, error) {
	return _Incentive.Contract.GetIncentiveDuration(&_Incentive.CallOpts)
}

// GetIncentiveDuration is a free data retrieval call binding the contract method 0xdd8dca9f.
//
// Solidity: function getIncentiveDuration() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetIncentiveDuration() (*big.Int, error) {
	return _Incentive.Contract.GetIncentiveDuration(&_Incentive.CallOpts)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveCaller) GetInflationAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getInflationAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveSession) GetInflationAddress() (common.Address, error) {
	return _Incentive.Contract.GetInflationAddress(&_Incentive.CallOpts)
}

// GetInflationAddress is a free data retrieval call binding the contract method 0xed39d3f8.
//
// Solidity: function getInflationAddress() view returns(address)
func (_Incentive *IncentiveCallerSession) GetInflationAddress() (common.Address, error) {
	return _Incentive.Contract.GetInflationAddress(&_Incentive.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveCaller) GetPrecision(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getPrecision")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveSession) GetPrecision() (*big.Int, error) {
	return _Incentive.Contract.GetPrecision(&_Incentive.CallOpts)
}

// GetPrecision is a free data retrieval call binding the contract method 0x9670c0bc.
//
// Solidity: function getPrecision() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetPrecision() (*big.Int, error) {
	return _Incentive.Contract.GetPrecision(&_Incentive.CallOpts)
}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveCaller) GetRange(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getRange")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveSession) GetRange() (*big.Int, error) {
	return _Incentive.Contract.GetRange(&_Incentive.CallOpts)
}

// GetRange is a free data retrieval call binding the contract method 0x9b85961f.
//
// Solidity: function getRange() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetRange() (*big.Int, error) {
	return _Incentive.Contract.GetRange(&_Incentive.CallOpts)
}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveCaller) GetScale(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getScale")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveSession) GetScale() (*big.Int, error) {
	return _Incentive.Contract.GetScale(&_Incentive.CallOpts)
}

// GetScale is a free data retrieval call binding the contract method 0xb5cddab8.
//
// Solidity: function getScale() view returns(uint256)
func (_Incentive *IncentiveCallerSession) GetScale() (*big.Int, error) {
	return _Incentive.Contract.GetScale(&_Incentive.CallOpts)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveCaller) GetTokenPoolSupplyData(opts *bind.CallOpts) (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "getTokenPoolSupplyData")

	outstruct := new(struct {
		LockedFundsWei              *big.Int
		TotalInflationAuthorizedWei *big.Int
		TotalClaimedWei             *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.LockedFundsWei = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.TotalInflationAuthorizedWei = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)
	outstruct.TotalClaimedWei = *abi.ConvertType(out[2], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveSession) GetTokenPoolSupplyData() (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _Incentive.Contract.GetTokenPoolSupplyData(&_Incentive.CallOpts)
}

// GetTokenPoolSupplyData is a free data retrieval call binding the contract method 0x2dafdbbf.
//
// Solidity: function getTokenPoolSupplyData() view returns(uint256 _lockedFundsWei, uint256 _totalInflationAuthorizedWei, uint256 _totalClaimedWei)
func (_Incentive *IncentiveCallerSession) GetTokenPoolSupplyData() (struct {
	LockedFundsWei              *big.Int
	TotalInflationAuthorizedWei *big.Int
	TotalClaimedWei             *big.Int
}, error) {
	return _Incentive.Contract.GetTokenPoolSupplyData(&_Incentive.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveCaller) Governance(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "governance")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveSession) Governance() (common.Address, error) {
	return _Incentive.Contract.Governance(&_Incentive.CallOpts)
}

// Governance is a free data retrieval call binding the contract method 0x5aa6e675.
//
// Solidity: function governance() view returns(address)
func (_Incentive *IncentiveCallerSession) Governance() (common.Address, error) {
	return _Incentive.Contract.Governance(&_Incentive.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveCaller) GovernanceSettings(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "governanceSettings")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveSession) GovernanceSettings() (common.Address, error) {
	return _Incentive.Contract.GovernanceSettings(&_Incentive.CallOpts)
}

// GovernanceSettings is a free data retrieval call binding the contract method 0x62354e03.
//
// Solidity: function governanceSettings() view returns(address)
func (_Incentive *IncentiveCallerSession) GovernanceSettings() (common.Address, error) {
	return _Incentive.Contract.GovernanceSettings(&_Incentive.CallOpts)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveCaller) IsExecutor(opts *bind.CallOpts, _address common.Address) (bool, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "isExecutor", _address)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveSession) IsExecutor(_address common.Address) (bool, error) {
	return _Incentive.Contract.IsExecutor(&_Incentive.CallOpts, _address)
}

// IsExecutor is a free data retrieval call binding the contract method 0xdebfda30.
//
// Solidity: function isExecutor(address _address) view returns(bool)
func (_Incentive *IncentiveCallerSession) IsExecutor(_address common.Address) (bool, error) {
	return _Incentive.Contract.IsExecutor(&_Incentive.CallOpts, _address)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCaller) LastInflationAuthorizationReceivedTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "lastInflationAuthorizationReceivedTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationAuthorizationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationAuthorizationReceivedTs is a free data retrieval call binding the contract method 0x473252c4.
//
// Solidity: function lastInflationAuthorizationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCallerSession) LastInflationAuthorizationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationAuthorizationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCaller) LastInflationReceivedTs(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "lastInflationReceivedTs")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveSession) LastInflationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationReceivedTs(&_Incentive.CallOpts)
}

// LastInflationReceivedTs is a free data retrieval call binding the contract method 0x12afcf0b.
//
// Solidity: function lastInflationReceivedTs() view returns(uint256)
func (_Incentive *IncentiveCallerSession) LastInflationReceivedTs() (*big.Int, error) {
	return _Incentive.Contract.LastInflationReceivedTs(&_Incentive.CallOpts)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveCaller) ProductionMode(opts *bind.CallOpts) (bool, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "productionMode")

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveSession) ProductionMode() (bool, error) {
	return _Incentive.Contract.ProductionMode(&_Incentive.CallOpts)
}

// ProductionMode is a free data retrieval call binding the contract method 0xe17f212e.
//
// Solidity: function productionMode() view returns(bool)
func (_Incentive *IncentiveCallerSession) ProductionMode() (bool, error) {
	return _Incentive.Contract.ProductionMode(&_Incentive.CallOpts)
}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCaller) RangeIncreasePrice(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "rangeIncreasePrice")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveSession) RangeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreasePrice(&_Incentive.CallOpts)
}

// RangeIncreasePrice is a free data retrieval call binding the contract method 0x52545a7c.
//
// Solidity: function rangeIncreasePrice() view returns(uint256)
func (_Incentive *IncentiveCallerSession) RangeIncreasePrice() (*big.Int, error) {
	return _Incentive.Contract.RangeIncreasePrice(&_Incentive.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveCaller) RewardManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "rewardManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveSession) RewardManager() (common.Address, error) {
	return _Incentive.Contract.RewardManager(&_Incentive.CallOpts)
}

// RewardManager is a free data retrieval call binding the contract method 0x0f4ef8a6.
//
// Solidity: function rewardManager() view returns(address)
func (_Incentive *IncentiveCallerSession) RewardManager() (common.Address, error) {
	return _Incentive.Contract.RewardManager(&_Incentive.CallOpts)
}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCaller) SampleIncreaseLimit(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "sampleIncreaseLimit")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveSession) SampleIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.SampleIncreaseLimit(&_Incentive.CallOpts)
}

// SampleIncreaseLimit is a free data retrieval call binding the contract method 0xd4ab8f94.
//
// Solidity: function sampleIncreaseLimit() view returns(uint256)
func (_Incentive *IncentiveCallerSession) SampleIncreaseLimit() (*big.Int, error) {
	return _Incentive.Contract.SampleIncreaseLimit(&_Incentive.CallOpts)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveCaller) TimelockedCalls(opts *bind.CallOpts, selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "timelockedCalls", selector)

	outstruct := new(struct {
		AllowedAfterTimestamp *big.Int
		EncodedCall           []byte
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.AllowedAfterTimestamp = *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)
	outstruct.EncodedCall = *abi.ConvertType(out[1], new([]byte)).(*[]byte)

	return *outstruct, err

}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _Incentive.Contract.TimelockedCalls(&_Incentive.CallOpts, selector)
}

// TimelockedCalls is a free data retrieval call binding the contract method 0x74e6310e.
//
// Solidity: function timelockedCalls(bytes4 selector) view returns(uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveCallerSession) TimelockedCalls(selector [4]byte) (struct {
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
}, error) {
	return _Incentive.Contract.TimelockedCalls(&_Incentive.CallOpts, selector)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationAuthorizedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationAuthorizedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationAuthorizedWei(&_Incentive.CallOpts)
}

// TotalInflationAuthorizedWei is a free data retrieval call binding the contract method 0xd0c1c393.
//
// Solidity: function totalInflationAuthorizedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationAuthorizedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationAuthorizedWei(&_Incentive.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationReceivedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationReceivedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationReceivedWei(&_Incentive.CallOpts)
}

// TotalInflationReceivedWei is a free data retrieval call binding the contract method 0xa5555aea.
//
// Solidity: function totalInflationReceivedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationReceivedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationReceivedWei(&_Incentive.CallOpts)
}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveCaller) TotalInflationRewardsOfferedWei(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Incentive.contract.Call(opts, &out, "totalInflationRewardsOfferedWei")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveSession) TotalInflationRewardsOfferedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationRewardsOfferedWei(&_Incentive.CallOpts)
}

// TotalInflationRewardsOfferedWei is a free data retrieval call binding the contract method 0xbd76b69c.
//
// Solidity: function totalInflationRewardsOfferedWei() view returns(uint256)
func (_Incentive *IncentiveCallerSession) TotalInflationRewardsOfferedWei() (*big.Int, error) {
	return _Incentive.Contract.TotalInflationRewardsOfferedWei(&_Incentive.CallOpts)
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveTransactor) Advance(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "advance")
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveSession) Advance() (*types.Transaction, error) {
	return _Incentive.Contract.Advance(&_Incentive.TransactOpts)
}

// Advance is a paid mutator transaction binding the contract method 0xea105ac7.
//
// Solidity: function advance() returns()
func (_Incentive *IncentiveTransactorSession) Advance() (*types.Transaction, error) {
	return _Incentive.Contract.Advance(&_Incentive.TransactOpts)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactor) CancelGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "cancelGovernanceCall", _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.CancelGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// CancelGovernanceCall is a paid mutator transaction binding the contract method 0x67fc4029.
//
// Solidity: function cancelGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactorSession) CancelGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.CancelGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactor) ExecuteGovernanceCall(opts *bind.TransactOpts, _selector [4]byte) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "executeGovernanceCall", _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.ExecuteGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// ExecuteGovernanceCall is a paid mutator transaction binding the contract method 0x5ff27079.
//
// Solidity: function executeGovernanceCall(bytes4 _selector) returns()
func (_Incentive *IncentiveTransactorSession) ExecuteGovernanceCall(_selector [4]byte) (*types.Transaction, error) {
	return _Incentive.Contract.ExecuteGovernanceCall(&_Incentive.TransactOpts, _selector)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveTransactor) Initialise(opts *bind.TransactOpts, _governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "initialise", _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.Initialise(&_Incentive.TransactOpts, _governanceSettings, _initialGovernance)
}

// Initialise is a paid mutator transaction binding the contract method 0xef88bf13.
//
// Solidity: function initialise(address _governanceSettings, address _initialGovernance) returns()
func (_Incentive *IncentiveTransactorSession) Initialise(_governanceSettings common.Address, _initialGovernance common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.Initialise(&_Incentive.TransactOpts, _governanceSettings, _initialGovernance)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveTransactor) OfferIncentive(opts *bind.TransactOpts, _offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "offerIncentive", _offer)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveSession) OfferIncentive(_offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.Contract.OfferIncentive(&_Incentive.TransactOpts, _offer)
}

// OfferIncentive is a paid mutator transaction binding the contract method 0x36247180.
//
// Solidity: function offerIncentive((uint256,uint256) _offer) payable returns()
func (_Incentive *IncentiveTransactorSession) OfferIncentive(_offer IFastUpdateIncentiveManagerIncentiveOffer) (*types.Transaction, error) {
	return _Incentive.Contract.OfferIncentive(&_Incentive.TransactOpts, _offer)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveTransactor) ReceiveInflation(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "receiveInflation")
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveSession) ReceiveInflation() (*types.Transaction, error) {
	return _Incentive.Contract.ReceiveInflation(&_Incentive.TransactOpts)
}

// ReceiveInflation is a paid mutator transaction binding the contract method 0x06201f1d.
//
// Solidity: function receiveInflation() payable returns()
func (_Incentive *IncentiveTransactorSession) ReceiveInflation() (*types.Transaction, error) {
	return _Incentive.Contract.ReceiveInflation(&_Incentive.TransactOpts)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveTransactor) SetDailyAuthorizedInflation(opts *bind.TransactOpts, _toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setDailyAuthorizedInflation", _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetDailyAuthorizedInflation(&_Incentive.TransactOpts, _toAuthorizeWei)
}

// SetDailyAuthorizedInflation is a paid mutator transaction binding the contract method 0xe2739563.
//
// Solidity: function setDailyAuthorizedInflation(uint256 _toAuthorizeWei) returns()
func (_Incentive *IncentiveTransactorSession) SetDailyAuthorizedInflation(_toAuthorizeWei *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetDailyAuthorizedInflation(&_Incentive.TransactOpts, _toAuthorizeWei)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0xb97e1f5d.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _dur) returns()
func (_Incentive *IncentiveTransactor) SetIncentiveParameters(opts *bind.TransactOpts, _ss *big.Int, _r *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setIncentiveParameters", _ss, _r, _dur)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0xb97e1f5d.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _dur) returns()
func (_Incentive *IncentiveSession) SetIncentiveParameters(_ss *big.Int, _r *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetIncentiveParameters(&_Incentive.TransactOpts, _ss, _r, _dur)
}

// SetIncentiveParameters is a paid mutator transaction binding the contract method 0xb97e1f5d.
//
// Solidity: function setIncentiveParameters(uint256 _ss, uint256 _r, uint256 _dur) returns()
func (_Incentive *IncentiveTransactorSession) SetIncentiveParameters(_ss *big.Int, _r *big.Int, _dur *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetIncentiveParameters(&_Incentive.TransactOpts, _ss, _r, _dur)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveTransactor) SetRangeIncreasePrice(opts *bind.TransactOpts, _price *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setRangeIncreasePrice", _price)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveSession) SetRangeIncreasePrice(_price *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreasePrice(&_Incentive.TransactOpts, _price)
}

// SetRangeIncreasePrice is a paid mutator transaction binding the contract method 0x0d6e9537.
//
// Solidity: function setRangeIncreasePrice(uint256 _price) returns()
func (_Incentive *IncentiveTransactorSession) SetRangeIncreasePrice(_price *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetRangeIncreasePrice(&_Incentive.TransactOpts, _price)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactor) SetSampleIncreaseLimit(opts *bind.TransactOpts, _lim *big.Int) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "setSampleIncreaseLimit", _lim)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveSession) SetSampleIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetSampleIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SetSampleIncreaseLimit is a paid mutator transaction binding the contract method 0xf7690bfe.
//
// Solidity: function setSampleIncreaseLimit(uint256 _lim) returns()
func (_Incentive *IncentiveTransactorSession) SetSampleIncreaseLimit(_lim *big.Int) (*types.Transaction, error) {
	return _Incentive.Contract.SetSampleIncreaseLimit(&_Incentive.TransactOpts, _lim)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveTransactor) SwitchToProductionMode(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "switchToProductionMode")
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _Incentive.Contract.SwitchToProductionMode(&_Incentive.TransactOpts)
}

// SwitchToProductionMode is a paid mutator transaction binding the contract method 0xf5a98383.
//
// Solidity: function switchToProductionMode() returns()
func (_Incentive *IncentiveTransactorSession) SwitchToProductionMode() (*types.Transaction, error) {
	return _Incentive.Contract.SwitchToProductionMode(&_Incentive.TransactOpts)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveTransactor) TriggerRewardEpochSwitchover(opts *bind.TransactOpts, _currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "triggerRewardEpochSwitchover", _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveSession) TriggerRewardEpochSwitchover(_currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.Contract.TriggerRewardEpochSwitchover(&_Incentive.TransactOpts, _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// TriggerRewardEpochSwitchover is a paid mutator transaction binding the contract method 0x91f25679.
//
// Solidity: function triggerRewardEpochSwitchover(uint24 _currentRewardEpochId, uint64 _currentRewardEpochExpectedEndTs, uint64 _rewardEpochDurationSeconds) returns()
func (_Incentive *IncentiveTransactorSession) TriggerRewardEpochSwitchover(_currentRewardEpochId *big.Int, _currentRewardEpochExpectedEndTs uint64, _rewardEpochDurationSeconds uint64) (*types.Transaction, error) {
	return _Incentive.Contract.TriggerRewardEpochSwitchover(&_Incentive.TransactOpts, _currentRewardEpochId, _currentRewardEpochExpectedEndTs, _rewardEpochDurationSeconds)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveTransactor) UpdateContractAddresses(opts *bind.TransactOpts, _contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.contract.Transact(opts, "updateContractAddresses", _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.UpdateContractAddresses(&_Incentive.TransactOpts, _contractNameHashes, _contractAddresses)
}

// UpdateContractAddresses is a paid mutator transaction binding the contract method 0xb00c0b76.
//
// Solidity: function updateContractAddresses(bytes32[] _contractNameHashes, address[] _contractAddresses) returns()
func (_Incentive *IncentiveTransactorSession) UpdateContractAddresses(_contractNameHashes [][32]byte, _contractAddresses []common.Address) (*types.Transaction, error) {
	return _Incentive.Contract.UpdateContractAddresses(&_Incentive.TransactOpts, _contractNameHashes, _contractAddresses)
}

// IncentiveDailyAuthorizedInflationSetIterator is returned from FilterDailyAuthorizedInflationSet and is used to iterate over the raw logs and unpacked data for DailyAuthorizedInflationSet events raised by the Incentive contract.
type IncentiveDailyAuthorizedInflationSetIterator struct {
	Event *IncentiveDailyAuthorizedInflationSet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveDailyAuthorizedInflationSet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveDailyAuthorizedInflationSet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveDailyAuthorizedInflationSetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveDailyAuthorizedInflationSet represents a DailyAuthorizedInflationSet event raised by the Incentive contract.
type IncentiveDailyAuthorizedInflationSet struct {
	AuthorizedAmountWei *big.Int
	Raw                 types.Log // Blockchain specific contextual infos
}

// FilterDailyAuthorizedInflationSet is a free log retrieval operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) FilterDailyAuthorizedInflationSet(opts *bind.FilterOpts) (*IncentiveDailyAuthorizedInflationSetIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return &IncentiveDailyAuthorizedInflationSetIterator{contract: _Incentive.contract, event: "DailyAuthorizedInflationSet", logs: logs, sub: sub}, nil
}

// WatchDailyAuthorizedInflationSet is a free log subscription operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) WatchDailyAuthorizedInflationSet(opts *bind.WatchOpts, sink chan<- *IncentiveDailyAuthorizedInflationSet) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "DailyAuthorizedInflationSet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveDailyAuthorizedInflationSet)
				if err := _Incentive.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseDailyAuthorizedInflationSet is a log parse operation binding the contract event 0x187f32a0f765499f15b3bb52ed0aebf6015059f230f2ace7e701e60a47669595.
//
// Solidity: event DailyAuthorizedInflationSet(uint256 authorizedAmountWei)
func (_Incentive *IncentiveFilterer) ParseDailyAuthorizedInflationSet(log types.Log) (*IncentiveDailyAuthorizedInflationSet, error) {
	event := new(IncentiveDailyAuthorizedInflationSet)
	if err := _Incentive.contract.UnpackLog(event, "DailyAuthorizedInflationSet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernanceCallTimelockedIterator is returned from FilterGovernanceCallTimelocked and is used to iterate over the raw logs and unpacked data for GovernanceCallTimelocked events raised by the Incentive contract.
type IncentiveGovernanceCallTimelockedIterator struct {
	Event *IncentiveGovernanceCallTimelocked // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernanceCallTimelockedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernanceCallTimelocked)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernanceCallTimelocked)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernanceCallTimelockedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernanceCallTimelockedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernanceCallTimelocked represents a GovernanceCallTimelocked event raised by the Incentive contract.
type IncentiveGovernanceCallTimelocked struct {
	Selector              [4]byte
	AllowedAfterTimestamp *big.Int
	EncodedCall           []byte
	Raw                   types.Log // Blockchain specific contextual infos
}

// FilterGovernanceCallTimelocked is a free log retrieval operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) FilterGovernanceCallTimelocked(opts *bind.FilterOpts) (*IncentiveGovernanceCallTimelockedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernanceCallTimelockedIterator{contract: _Incentive.contract, event: "GovernanceCallTimelocked", logs: logs, sub: sub}, nil
}

// WatchGovernanceCallTimelocked is a free log subscription operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) WatchGovernanceCallTimelocked(opts *bind.WatchOpts, sink chan<- *IncentiveGovernanceCallTimelocked) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernanceCallTimelocked")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernanceCallTimelocked)
				if err := _Incentive.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceCallTimelocked is a log parse operation binding the contract event 0xed948300a3694aa01d4a6b258bfd664350193d770c0b51f8387277f6d83ea3b6.
//
// Solidity: event GovernanceCallTimelocked(bytes4 selector, uint256 allowedAfterTimestamp, bytes encodedCall)
func (_Incentive *IncentiveFilterer) ParseGovernanceCallTimelocked(log types.Log) (*IncentiveGovernanceCallTimelocked, error) {
	event := new(IncentiveGovernanceCallTimelocked)
	if err := _Incentive.contract.UnpackLog(event, "GovernanceCallTimelocked", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernanceInitialisedIterator is returned from FilterGovernanceInitialised and is used to iterate over the raw logs and unpacked data for GovernanceInitialised events raised by the Incentive contract.
type IncentiveGovernanceInitialisedIterator struct {
	Event *IncentiveGovernanceInitialised // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernanceInitialisedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernanceInitialised)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernanceInitialised)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernanceInitialisedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernanceInitialisedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernanceInitialised represents a GovernanceInitialised event raised by the Incentive contract.
type IncentiveGovernanceInitialised struct {
	InitialGovernance common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterGovernanceInitialised is a free log retrieval operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) FilterGovernanceInitialised(opts *bind.FilterOpts) (*IncentiveGovernanceInitialisedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernanceInitialisedIterator{contract: _Incentive.contract, event: "GovernanceInitialised", logs: logs, sub: sub}, nil
}

// WatchGovernanceInitialised is a free log subscription operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) WatchGovernanceInitialised(opts *bind.WatchOpts, sink chan<- *IncentiveGovernanceInitialised) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernanceInitialised")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernanceInitialised)
				if err := _Incentive.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernanceInitialised is a log parse operation binding the contract event 0x9789733827840833afc031fb2ef9ab6894271f77bad2085687cf4ae5c7bee4db.
//
// Solidity: event GovernanceInitialised(address initialGovernance)
func (_Incentive *IncentiveFilterer) ParseGovernanceInitialised(log types.Log) (*IncentiveGovernanceInitialised, error) {
	event := new(IncentiveGovernanceInitialised)
	if err := _Incentive.contract.UnpackLog(event, "GovernanceInitialised", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveGovernedProductionModeEnteredIterator is returned from FilterGovernedProductionModeEntered and is used to iterate over the raw logs and unpacked data for GovernedProductionModeEntered events raised by the Incentive contract.
type IncentiveGovernedProductionModeEnteredIterator struct {
	Event *IncentiveGovernedProductionModeEntered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveGovernedProductionModeEnteredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveGovernedProductionModeEntered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveGovernedProductionModeEntered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveGovernedProductionModeEnteredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveGovernedProductionModeEnteredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveGovernedProductionModeEntered represents a GovernedProductionModeEntered event raised by the Incentive contract.
type IncentiveGovernedProductionModeEntered struct {
	GovernanceSettings common.Address
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterGovernedProductionModeEntered is a free log retrieval operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) FilterGovernedProductionModeEntered(opts *bind.FilterOpts) (*IncentiveGovernedProductionModeEnteredIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return &IncentiveGovernedProductionModeEnteredIterator{contract: _Incentive.contract, event: "GovernedProductionModeEntered", logs: logs, sub: sub}, nil
}

// WatchGovernedProductionModeEntered is a free log subscription operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) WatchGovernedProductionModeEntered(opts *bind.WatchOpts, sink chan<- *IncentiveGovernedProductionModeEntered) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "GovernedProductionModeEntered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveGovernedProductionModeEntered)
				if err := _Incentive.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseGovernedProductionModeEntered is a log parse operation binding the contract event 0x83af113638b5422f9e977cebc0aaf0eaf2188eb9a8baae7f9d46c42b33a1560c.
//
// Solidity: event GovernedProductionModeEntered(address governanceSettings)
func (_Incentive *IncentiveFilterer) ParseGovernedProductionModeEntered(log types.Log) (*IncentiveGovernedProductionModeEntered, error) {
	event := new(IncentiveGovernedProductionModeEntered)
	if err := _Incentive.contract.UnpackLog(event, "GovernedProductionModeEntered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveIncentiveOfferedIterator is returned from FilterIncentiveOffered and is used to iterate over the raw logs and unpacked data for IncentiveOffered events raised by the Incentive contract.
type IncentiveIncentiveOfferedIterator struct {
	Event *IncentiveIncentiveOffered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveIncentiveOfferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveIncentiveOffered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveIncentiveOffered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveIncentiveOfferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveIncentiveOfferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveIncentiveOffered represents a IncentiveOffered event raised by the Incentive contract.
type IncentiveIncentiveOffered struct {
	RangeIncrease      *big.Int
	SampleSizeIncrease *big.Int
	OfferAmount        *big.Int
	Raw                types.Log // Blockchain specific contextual infos
}

// FilterIncentiveOffered is a free log retrieval operation binding the contract event 0xe2bf2dae8fb2fd1f86fd6d50871b97c48b27cd148bb07311c99b4b7b24453f5b.
//
// Solidity: event IncentiveOffered(uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) FilterIncentiveOffered(opts *bind.FilterOpts) (*IncentiveIncentiveOfferedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "IncentiveOffered")
	if err != nil {
		return nil, err
	}
	return &IncentiveIncentiveOfferedIterator{contract: _Incentive.contract, event: "IncentiveOffered", logs: logs, sub: sub}, nil
}

// WatchIncentiveOffered is a free log subscription operation binding the contract event 0xe2bf2dae8fb2fd1f86fd6d50871b97c48b27cd148bb07311c99b4b7b24453f5b.
//
// Solidity: event IncentiveOffered(uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) WatchIncentiveOffered(opts *bind.WatchOpts, sink chan<- *IncentiveIncentiveOffered) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "IncentiveOffered")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveIncentiveOffered)
				if err := _Incentive.contract.UnpackLog(event, "IncentiveOffered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseIncentiveOffered is a log parse operation binding the contract event 0xe2bf2dae8fb2fd1f86fd6d50871b97c48b27cd148bb07311c99b4b7b24453f5b.
//
// Solidity: event IncentiveOffered(uint256 rangeIncrease, uint256 sampleSizeIncrease, uint256 offerAmount)
func (_Incentive *IncentiveFilterer) ParseIncentiveOffered(log types.Log) (*IncentiveIncentiveOffered, error) {
	event := new(IncentiveIncentiveOffered)
	if err := _Incentive.contract.UnpackLog(event, "IncentiveOffered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveInflationReceivedIterator is returned from FilterInflationReceived and is used to iterate over the raw logs and unpacked data for InflationReceived events raised by the Incentive contract.
type IncentiveInflationReceivedIterator struct {
	Event *IncentiveInflationReceived // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveInflationReceivedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveInflationReceived)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveInflationReceived)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveInflationReceivedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveInflationReceivedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveInflationReceived represents a InflationReceived event raised by the Incentive contract.
type IncentiveInflationReceived struct {
	AmountReceivedWei *big.Int
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterInflationReceived is a free log retrieval operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) FilterInflationReceived(opts *bind.FilterOpts) (*IncentiveInflationReceivedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return &IncentiveInflationReceivedIterator{contract: _Incentive.contract, event: "InflationReceived", logs: logs, sub: sub}, nil
}

// WatchInflationReceived is a free log subscription operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) WatchInflationReceived(opts *bind.WatchOpts, sink chan<- *IncentiveInflationReceived) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "InflationReceived")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveInflationReceived)
				if err := _Incentive.contract.UnpackLog(event, "InflationReceived", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInflationReceived is a log parse operation binding the contract event 0x95c4e29cc99bc027cfc3cd719d6fd973d5f0317061885fbb322b9b17d8d35d37.
//
// Solidity: event InflationReceived(uint256 amountReceivedWei)
func (_Incentive *IncentiveFilterer) ParseInflationReceived(log types.Log) (*IncentiveInflationReceived, error) {
	event := new(IncentiveInflationReceived)
	if err := _Incentive.contract.UnpackLog(event, "InflationReceived", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveInflationRewardsOfferedIterator is returned from FilterInflationRewardsOffered and is used to iterate over the raw logs and unpacked data for InflationRewardsOffered events raised by the Incentive contract.
type IncentiveInflationRewardsOfferedIterator struct {
	Event *IncentiveInflationRewardsOffered // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveInflationRewardsOfferedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveInflationRewardsOffered)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveInflationRewardsOffered)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveInflationRewardsOfferedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveInflationRewardsOfferedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveInflationRewardsOffered represents a InflationRewardsOffered event raised by the Incentive contract.
type IncentiveInflationRewardsOffered struct {
	RewardEpochId    *big.Int
	FeedIds          []byte
	RewardBandValues []byte
	InflationShares  []byte
	Amount           *big.Int
	Raw              types.Log // Blockchain specific contextual infos
}

// FilterInflationRewardsOffered is a free log retrieval operation binding the contract event 0xfdd0b465b401aa1b01bf9945ca3b5ad04d97007d090db1f5b126a502e890d610.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, bytes feedIds, bytes rewardBandValues, bytes inflationShares, uint256 amount)
func (_Incentive *IncentiveFilterer) FilterInflationRewardsOffered(opts *bind.FilterOpts, rewardEpochId []*big.Int) (*IncentiveInflationRewardsOfferedIterator, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "InflationRewardsOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return &IncentiveInflationRewardsOfferedIterator{contract: _Incentive.contract, event: "InflationRewardsOffered", logs: logs, sub: sub}, nil
}

// WatchInflationRewardsOffered is a free log subscription operation binding the contract event 0xfdd0b465b401aa1b01bf9945ca3b5ad04d97007d090db1f5b126a502e890d610.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, bytes feedIds, bytes rewardBandValues, bytes inflationShares, uint256 amount)
func (_Incentive *IncentiveFilterer) WatchInflationRewardsOffered(opts *bind.WatchOpts, sink chan<- *IncentiveInflationRewardsOffered, rewardEpochId []*big.Int) (event.Subscription, error) {

	var rewardEpochIdRule []interface{}
	for _, rewardEpochIdItem := range rewardEpochId {
		rewardEpochIdRule = append(rewardEpochIdRule, rewardEpochIdItem)
	}

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "InflationRewardsOffered", rewardEpochIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveInflationRewardsOffered)
				if err := _Incentive.contract.UnpackLog(event, "InflationRewardsOffered", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInflationRewardsOffered is a log parse operation binding the contract event 0xfdd0b465b401aa1b01bf9945ca3b5ad04d97007d090db1f5b126a502e890d610.
//
// Solidity: event InflationRewardsOffered(uint24 indexed rewardEpochId, bytes feedIds, bytes rewardBandValues, bytes inflationShares, uint256 amount)
func (_Incentive *IncentiveFilterer) ParseInflationRewardsOffered(log types.Log) (*IncentiveInflationRewardsOffered, error) {
	event := new(IncentiveInflationRewardsOffered)
	if err := _Incentive.contract.UnpackLog(event, "InflationRewardsOffered", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveTimelockedGovernanceCallCanceledIterator is returned from FilterTimelockedGovernanceCallCanceled and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallCanceled events raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallCanceledIterator struct {
	Event *IncentiveTimelockedGovernanceCallCanceled // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveTimelockedGovernanceCallCanceled)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveTimelockedGovernanceCallCanceled)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveTimelockedGovernanceCallCanceledIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveTimelockedGovernanceCallCanceled represents a TimelockedGovernanceCallCanceled event raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallCanceled struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallCanceled is a free log retrieval operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) FilterTimelockedGovernanceCallCanceled(opts *bind.FilterOpts) (*IncentiveTimelockedGovernanceCallCanceledIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return &IncentiveTimelockedGovernanceCallCanceledIterator{contract: _Incentive.contract, event: "TimelockedGovernanceCallCanceled", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallCanceled is a free log subscription operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) WatchTimelockedGovernanceCallCanceled(opts *bind.WatchOpts, sink chan<- *IncentiveTimelockedGovernanceCallCanceled) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "TimelockedGovernanceCallCanceled")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveTimelockedGovernanceCallCanceled)
				if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallCanceled is a log parse operation binding the contract event 0x7735b2391c38a81419c513e30ca578db7158eadd7101511b23e221c654d19cf8.
//
// Solidity: event TimelockedGovernanceCallCanceled(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) ParseTimelockedGovernanceCallCanceled(log types.Log) (*IncentiveTimelockedGovernanceCallCanceled, error) {
	event := new(IncentiveTimelockedGovernanceCallCanceled)
	if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallCanceled", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// IncentiveTimelockedGovernanceCallExecutedIterator is returned from FilterTimelockedGovernanceCallExecuted and is used to iterate over the raw logs and unpacked data for TimelockedGovernanceCallExecuted events raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallExecutedIterator struct {
	Event *IncentiveTimelockedGovernanceCallExecuted // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(IncentiveTimelockedGovernanceCallExecuted)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(IncentiveTimelockedGovernanceCallExecuted)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *IncentiveTimelockedGovernanceCallExecutedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// IncentiveTimelockedGovernanceCallExecuted represents a TimelockedGovernanceCallExecuted event raised by the Incentive contract.
type IncentiveTimelockedGovernanceCallExecuted struct {
	Selector  [4]byte
	Timestamp *big.Int
	Raw       types.Log // Blockchain specific contextual infos
}

// FilterTimelockedGovernanceCallExecuted is a free log retrieval operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) FilterTimelockedGovernanceCallExecuted(opts *bind.FilterOpts) (*IncentiveTimelockedGovernanceCallExecutedIterator, error) {

	logs, sub, err := _Incentive.contract.FilterLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return &IncentiveTimelockedGovernanceCallExecutedIterator{contract: _Incentive.contract, event: "TimelockedGovernanceCallExecuted", logs: logs, sub: sub}, nil
}

// WatchTimelockedGovernanceCallExecuted is a free log subscription operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) WatchTimelockedGovernanceCallExecuted(opts *bind.WatchOpts, sink chan<- *IncentiveTimelockedGovernanceCallExecuted) (event.Subscription, error) {

	logs, sub, err := _Incentive.contract.WatchLogs(opts, "TimelockedGovernanceCallExecuted")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(IncentiveTimelockedGovernanceCallExecuted)
				if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTimelockedGovernanceCallExecuted is a log parse operation binding the contract event 0xa7326b57fc9cfe267aaea5e7f0b01757154d265620a0585819416ee9ddd2c438.
//
// Solidity: event TimelockedGovernanceCallExecuted(bytes4 selector, uint256 timestamp)
func (_Incentive *IncentiveFilterer) ParseTimelockedGovernanceCallExecuted(log types.Log) (*IncentiveTimelockedGovernanceCallExecuted, error) {
	event := new(IncentiveTimelockedGovernanceCallExecuted)
	if err := _Incentive.contract.UnpackLog(event, "TimelockedGovernanceCallExecuted", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
